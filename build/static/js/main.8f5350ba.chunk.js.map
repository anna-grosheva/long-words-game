{"version":3,"sources":["PlayerBlock.js","Manual.js","App.js","index.js"],"names":["PlayerBlock","this","props","classBlock","classScore","classButton","scores","notSelected","giveUp","checkWord","checkWordDisabled","className","disabled","onClick","Component","Manual","state","manualIsVisible","changeManualIsVisible","setState","App","word","inputLength","ifWordExists","scoresRed","scoresGreen","whichIsActive","giveUps","finalState","changeInput","event","target","value","replace","getRandomLetter","alphabet","charAt","Math","floor","random","length","changeWhichIsActive","playerGivesUp","nextRoundHandler","newGameHandler","fetch","then","res","json","data","def","catch","err","console","log","maxLength","onChange","href","rel","ReactDOM","render","document","getElementById"],"mappings":"4LAuBeA,G,4KAnBH,IAAD,EACoGC,KAAKC,MAAxGC,EADD,EACCA,WAAYC,EADb,EACaA,WAAYC,EADzB,EACyBA,YAAaC,EADtC,EACsCA,OAAQC,EAD9C,EAC8CA,YAAaC,EAD3D,EAC2DA,OAAQC,EADnE,EACmEA,UAAWC,EAD9E,EAC8EA,kBACrF,OACE,yBAAKC,UAAW,eAAiBR,EAAa,IAAMI,GAClD,uBAAGI,UAAWP,GAAaE,GAC3B,4BACEK,UAAW,uBAAyBN,EACpCO,SAAUL,EACVM,QAASL,GAHX,WAKA,4BACEG,UAAW,uBAAyBN,EACpCO,SAAUL,IAAgBG,EAC1BG,QAASJ,GAHX,uB,GAXkBK,cCwDXC,E,4MAvDXC,MAAQ,CACJC,iBAAiB,G,EAGrBC,sBAAwB,YACe,IAA/B,EAAKF,MAAMC,gBACX,EAAKE,SAAS,CAAEF,iBAAiB,IAEjC,EAAKE,SAAS,CAAEF,iBAAiB,K,uDAK/B,IACEA,EAAoBhB,KAAKe,MAAzBC,gBACR,OACI,6BACI,4BACIN,UAAU,gBACVE,QAASZ,KAAKiB,uBAFlB,eAIA,yBAAKP,UAAWM,EAAkB,SAAW,aACzC,yBAAKN,UAAU,mBACX,wBAAIA,UAAU,gBACV,mKACA,wGACA,sIAA2G,6BAA3G,sTAGA,oIACA,+EAAoD,6BAAM,6BAA1D,4BACyB,6BADzB,+BAE4B,6BAF5B,kCAG+B,6BAH/B,oCAIiC,6BAJjC,yCAKsC,6BALtC,QAQA,+GACA,yOAA+L,6BAAM,6BAArM,kJACqI,6BAAM,6BAD3I,6HAE8H,6BAAM,6BAFpI,wHAKA,sHACA,kFACA,qFAEJ,4BAAQA,UAAU,gBAAgBE,QAASZ,KAAKiB,uBAAhD,e,GAjDHJ,aCuINM,E,4MApIbJ,MAAQ,CACNK,KAAM,GACNC,YAAa,EACbC,aAAc,GACdC,UAAW,EACXC,YAAa,EACbC,cAAe,MACfC,QAAS,EACTC,YAAY,G,EAGdC,YAAc,SAACC,GACb,EAAKX,SAAS,CAAEE,KAAMS,EAAMC,OAAOC,MAAMC,QAAQ,YAAa,O,EAGhEC,gBAAkB,WAChB,IAAIC,EAAW,6BACf,EAAKhB,SAAS,CAAEE,KAAMc,EAASC,OAAOC,KAAKC,MAAMD,KAAKE,SAAWJ,EAASK,Y,EAO5EC,oBAAsB,WACpB,IAAIf,EAA6C,QAA7B,EAAKV,MAAMU,cAA0B,QAAU,MACnE,EAAKP,SAAS,CAAEO,cAAeA,EAAeJ,YAAa,EAAKN,MAAMM,YAAc,K,EAGtFoB,cAAgB,WACd,EAAKD,sBACL,EAAKtB,SAAS,CAAEQ,QAAS,EAAKX,MAAMW,QAAU,K,EAGhDgB,iBAAmB,WACjB,EAAKT,kBADkB,MAEY,EAAKlB,MAAhCQ,EAFe,EAEfA,UAAWC,EAFI,EAEJA,YACnB,EAAKN,SAAS,CAAEQ,QAAS,EAAGL,YAAa,EAAGM,YAAY,EAAOL,aAAc,KACzEC,GAAaC,EACf,EAAKN,SAAS,CAAEO,cAAe,QAE/B,EAAKP,SAAS,CAAEO,cAAe,W,EAInCkB,eAAiB,WACf,EAAKV,kBACL,EAAKf,SAAS,CAAEK,UAAW,EAAGC,YAAa,EAAGC,cAAe,MAAOC,QAAS,EAAGL,YAAa,EAAGM,YAAY,EAAOL,aAAc,M,EAGnId,UAAY,SAACY,GAAU,IAAD,EAC8B,EAAKL,MAA/CU,EADY,EACZA,cAAeF,EADH,EACGA,UAAWC,EADd,EACcA,YAClCoB,MAAM,uKAAD,OAAwKxB,IAC5KyB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMjC,EAAQ,CAAEY,YAAY,GACxBqB,EAAKC,IAAIV,OAAS,GACpBxB,EAAMO,aAAe,MACC,QAAlBG,EACFV,EAAMQ,UAAYA,EAAYH,EAAKmB,OAEnCxB,EAAMS,YAAcA,EAAcJ,EAAKmB,SAGzCxB,EAAMO,aAAe,KACC,QAAlBG,EACFV,EAAMS,YAAcA,EAAcJ,EAAKmB,OAEvCxB,EAAMQ,UAAYA,EAAYH,EAAKmB,QAGvC,EAAKrB,SAASH,MAEfmC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,O,kEArDdnD,KAAKiC,oB,+BAyDG,IAAD,SACiGjC,KAAKe,MAArGQ,EADD,EACCA,UAAWC,EADZ,EACYA,YAAaJ,EADzB,EACyBA,KAAMK,EAD/B,EAC+BA,cAAeC,EAD9C,EAC8CA,QAASL,EADvD,EACuDA,YAAaC,EADpE,EACoEA,aAAcK,EADlF,EACkFA,WACzF,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,UACb,wBAAIA,UAAU,mBAAd,cACA,uBAAGA,UAAU,kBAAb,8CACA,yBAAKA,UAAU,qBACK,QAAjBY,EAAyB,uBAAGZ,UAAU,mBAAb,UAA8C,KACtD,OAAjBY,EAAwB,uBAAGZ,UAAU,iBAAb,UAA4C,KACrE,2BACEA,UAAU,gBACV4C,UAAuB,IAAZ5B,EAAgBL,EAAc,EAAI,KAC7CU,MAAOX,EACPmC,SAAUvD,KAAK4B,cAEjB,4BAAQlB,UAAU,iBAAiBC,SAA0B,IAAhBS,EAAKmB,QAAgBb,EAAU,EAAGd,QAASZ,KAAKwC,qBAA7F,YAGJ,yBAAK9B,UAAU,UACb,kBAAC,EAAD,CACER,WAAW,YACXC,WAAW,YACXC,YAAY,cACZC,OAAQkB,EACRjB,YAA+B,QAAlBmB,GAAuC,IAAZC,EAAgB,KAAO,eAC/DnB,OAAQP,KAAKyC,cACbjC,UAAW,kBAAM,EAAKA,UAAUY,IAChCX,kBAAmBiB,EAAU,EAAI,eAAiB,OAEpD,kBAAC,EAAD,CACExB,WAAW,cACXC,WAAW,cACXC,YAAY,gBACZC,OAAQmB,EACRlB,YAA+B,UAAlBmB,GAAyC,IAAZC,EAAgB,KAAO,eACjEnB,OAAQP,KAAKyC,cACbjC,UAAW,kBAAM,EAAKA,UAAUY,IAChCX,kBAAmBiB,EAAU,EAAI,eAAiB,QAGrDC,EAAa,6BAAyB,QAAlBF,GAA4C,QAAjBH,GAA8C,UAAlBG,GAA8C,OAAjBH,EAAyB,uBAAGZ,UAAU,2BAAb,gBAA0D,uBAAGA,UAAU,6BAAb,mBAAqE,KACpP,IAAZgB,EAAgB,uBAAGhB,UAAU,iBAAb,gBAAgD,KACpD,IAAZgB,GAAiBC,EAChB,yBAAKjB,UAAU,iBACb,4BAAQA,UAAU,mBAAmBE,QAASZ,KAAK0C,kBAAnD,cACA,4BAAQhC,UAAU,mBAAmBE,QAASZ,KAAK2C,gBAAnD,aACO,KACX,uBAAGjC,UAAU,UAAb,cAAiC,uBAAG8C,KAAK,sCAAsC1B,OAAO,SAAS2B,IAAI,sBAAsB/C,UAAU,gBAAlG,2B,GAhIvBG,aCAlB6C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.8f5350ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style.css';\n\nclass PlayerBlock extends Component {\n  render() {\n    const { classBlock, classScore, classButton, scores, notSelected, giveUp, checkWord, checkWordDisabled } = this.props;\n    return (\n      <div className={\"playerblock \" + classBlock + ' ' + notSelected}>\n        <p className={classScore}>{scores}</p>\n        <button \n          className={\"playerblock__button \" + classButton} \n          disabled={notSelected}\n          onClick={giveUp}\n          >Give up</button>\n        <button \n          className={\"playerblock__button \" + classButton} \n          disabled={notSelected || !checkWordDisabled}\n          onClick={checkWord}\n          >Check the word</button>\n      </div>\n    );\n  }\n}\nexport default PlayerBlock;\n","import React, { Component } from 'react';\nimport './style.css';\n\nclass Manual extends Component {\n    state = {\n        manualIsVisible: false\n    }\n\n    changeManualIsVisible = () => {\n        if (this.state.manualIsVisible === false) {\n            this.setState({ manualIsVisible: true });\n        } else {\n            this.setState({ manualIsVisible: false });\n        }\n        \n    }\n\n    render() {\n        const { manualIsVisible } = this.state;\n        return (\n            <div>\n                <button \n                    className=\"how-to-button\"\n                    onClick={this.changeManualIsVisible}\n                    >How to play</button>\n                <div className={manualIsVisible ? \"manual\" : \"invisible\"}>\n                    <div className=\"manual__content\">\n                        <ol className=\"manual__text\">\n                            <li>Two players try to type an existing long English word putting letters one by one to the line. The first letter is randomly defined.</li>\n                            <li>At every step of the game players must know what word they have in mind.</li>\n                            <li>Each player can put only one letter at once in any place: before, after or between the written letters.<br />\n                            It can be any letter of the planned word: let’s say, if there’s PR in the line and the player thinks about the word PRODUCTION, so it’s not necessary to put O next, moreover, it’s recommended to use any other letters of the word to make the game for your rival harder (PRU for example).\n                            </li>\n                            <li>After putting a new letter, the player clicks “Submit” to pass the game to another player.</li>\n                            <li>Players take turns and add letters. For example:<br /><br />\n                            Player1: H (in mind: HOT)<br />\n                            Player2: U H (in mind: PUSH)<br />\n                            Player1: U C H (in mind: PUNCH)<br />\n                            Player2: L U C H (in mind: LUNCH)<br />\n                            Player1: L U C H E (in mind: LUNCHEON)<br />\n                            etc.\n                            </li>\n                            <li>The aim is to type the longest word you can recall in order to get more points.</li>\n                            <li>If at any point of the game one of the players (Player1) doesn’t know any existing word with a written letter combination, he/she clicks “Give up” and another player (Player2) takes turn.<br /><br />\n                            After it Player2 has a chance to type fully the word he/she has in mind and check it in the dictionary (the button “Check the word”):<br /><br />\n                                a) if the word exists (the green check mark appears), Player2 wins and gets as much points as letters in the checked word;<br /><br />\n                                b) if there’s no such word in the dictionary (the red cross appears), Player1 wins instead and gets all points.\n                            </li>\n                            <li>If both players give up one by one, then it’s a draw and none of them get points.</li>\n                            <li>Click “Next Round” to start a new round.</li>\n                            <li>The player who has more points starts the new round.</li>\n                        </ol>\n                        <button className=\"manual__close\" onClick={this.changeManualIsVisible}>&times;</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Manual;","import React, { Component } from 'react';\nimport './style.css';\nimport PlayerBlock from './PlayerBlock';\nimport Manual from './Manual';\n\nclass App extends Component {\n  state = {\n    word: '',\n    inputLength: 1,\n    ifWordExists: '',\n    scoresRed: 0,\n    scoresGreen: 0,\n    whichIsActive: 'red',\n    giveUps: 0,\n    finalState: false\n  }\n\n  changeInput = (event) => {\n    this.setState({ word: event.target.value.replace(/[^A-Za-z]/, '') });\n  }\n\n  getRandomLetter = () => {\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    this.setState({ word: alphabet.charAt(Math.floor(Math.random() * alphabet.length)) });\n  }\n\n  componentDidMount() {\n    this.getRandomLetter();\n  }\n\n  changeWhichIsActive = () => {\n    let whichIsActive = this.state.whichIsActive === 'red' ? 'green' : 'red';\n    this.setState({ whichIsActive: whichIsActive, inputLength: this.state.inputLength + 1 });\n  }\n\n  playerGivesUp = () => {\n    this.changeWhichIsActive();\n    this.setState({ giveUps: this.state.giveUps + 1 });\n  }\n\n  nextRoundHandler = () => {\n    this.getRandomLetter();\n    const { scoresRed, scoresGreen } = this.state;\n    this.setState({ giveUps: 0, inputLength: 1, finalState: false, ifWordExists: '' });\n    if (scoresRed >= scoresGreen) {\n      this.setState({ whichIsActive: 'red' });\n    } else {\n      this.setState({ whichIsActive: 'green' });\n    }\n  }\n\n  newGameHandler = () => {\n    this.getRandomLetter();\n    this.setState({ scoresRed: 0, scoresGreen: 0, whichIsActive: 'red', giveUps: 0, inputLength: 1, finalState: false, ifWordExists: '' });\n  }\n\n  checkWord = (word) => {\n    const { whichIsActive, scoresRed, scoresGreen } = this.state;\n    fetch(`https://dictionary.yandex.net/api/v1/dicservice.json/lookup?key=dict.1.1.20200930T073609Z.78822774b8132738.c148d7698da51b2165b444c78c2c8ffb9d84a4b8&lang=en-ru&text=${word}`)\n    .then(res => res.json())\n    .then(data => {\n      const state = { finalState: true }\n      if (data.def.length > 0) {\n        state.ifWordExists = 'yes';\n        if (whichIsActive === 'red') {\n          state.scoresRed = scoresRed + word.length;\n        } else {\n          state.scoresGreen = scoresGreen + word.length;\n        }\n      } else {\n        state.ifWordExists = 'no';\n        if (whichIsActive === 'red') {\n          state.scoresGreen = scoresGreen + word.length;\n        } else {\n          state.scoresRed = scoresRed + word.length;\n        }\n      }\n      this.setState(state);\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  }\n\n  render() {\n    const { scoresRed, scoresGreen, word, whichIsActive, giveUps, inputLength, ifWordExists, finalState } = this.state;\n    return (\n      <div className=\"app\">\n        <Manual />\n        <div className=\"header\">\n          <h1 className=\"header__heading\">LONG WORDS</h1>\n          <p className=\"header__slogan\">Score points by putting letters one by one</p>\n          <div className=\"header__wordfield\">\n            {ifWordExists === 'yes' ? <p className=\"header__correct\">&#10003;</p> : null}\n            {ifWordExists === 'no' ? <p className=\"header__wrong\">&#10007;</p> : null}\n            <input \n              className=\"header__input\" \n              maxLength={giveUps === 0 ? inputLength + 1 : \"50\"} \n              value={word} \n              onChange={this.changeInput}\n            />\n            <button className=\"header__button\" disabled={word.length === 1 || giveUps > 0} onClick={this.changeWhichIsActive}>Submit</button>\n          </div>\n        </div>\n        <div className=\"blocks\">\n          <PlayerBlock \n            classBlock=\"red-block\"\n            classScore=\"red-score\"\n            classButton=\"red-buttons\"\n            scores={scoresRed}\n            notSelected={whichIsActive === 'red' && giveUps !== 2 ? null : \"not-selected\"}\n            giveUp={this.playerGivesUp}\n            checkWord={() => this.checkWord(word)}\n            checkWordDisabled={giveUps > 0 ? \"not-selected\" : null}\n            />\n          <PlayerBlock \n            classBlock=\"green-block\"\n            classScore=\"green-score\"\n            classButton=\"green-buttons\"\n            scores={scoresGreen}\n            notSelected={whichIsActive === 'green' && giveUps !== 2 ? null : \"not-selected\"}\n            giveUp={this.playerGivesUp}\n            checkWord={() => this.checkWord(word)}\n            checkWordDisabled={giveUps > 0 ? \"not-selected\" : null}\n            />\n        </div>\n        {finalState ? <div>{(whichIsActive === 'red' && ifWordExists === 'yes') || (whichIsActive === 'green' && ifWordExists === 'no') ? <p className=\"final-message red-color\">THE RED WON!</p> : <p className=\"final-message green-color\">THE GREEN WON!</p>}</div> : null}\n        {giveUps === 2 ? <p className=\"final-message\">IT'S A DRAW!</p> : null}\n        {giveUps === 2 || finalState ? \n          <div className=\"final-buttons\">\n            <button className=\"nextround-button\" onClick={this.nextRoundHandler}>Next Round</button>\n            <button className=\"nextround-button\" onClick={this.newGameHandler}>New Game</button>\n          </div> : null}\n        <p className=\"yandex\">Powered by <a href=\"https://tech.yandex.com/dictionary/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"yandex__link\">Yandex.Dictionary</a></p>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}